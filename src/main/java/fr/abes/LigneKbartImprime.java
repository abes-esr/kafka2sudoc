/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package fr.abes;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@org.apache.avro.specific.AvroGenerated
public class LigneKbartImprime extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4309910992179539973L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LigneKbartImprime\",\"namespace\":\"fr.abes\",\"fields\":[{\"name\":\"ppn\",\"type\":\"string\"},{\"name\":\"publicationTitle\",\"type\":[\"null\",\"string\"]},{\"name\":\"printIdentifier\",\"type\":[\"null\",\"string\"]},{\"name\":\"onlineIdentifier\",\"type\":[\"null\",\"string\"]},{\"name\":\"dateFirstIssueOnline\",\"type\":[\"null\",\"string\"]},{\"name\":\"numFirstVolOnline\",\"type\":[\"null\",\"int\"]},{\"name\":\"numFirstIssueOnline\",\"type\":[\"null\",\"int\"]},{\"name\":\"dateLastIssueOnline\",\"type\":[\"null\",\"string\"]},{\"name\":\"numLastVolOnline\",\"type\":[\"null\",\"int\"]},{\"name\":\"numLastIssueOnline\",\"type\":[\"null\",\"int\"]},{\"name\":\"titleUrl\",\"type\":[\"null\",\"string\"]},{\"name\":\"firstAuthor\",\"type\":[\"null\",\"string\"]},{\"name\":\"titleId\",\"type\":[\"null\",\"string\"]},{\"name\":\"embargoInfo\",\"type\":[\"null\",\"string\"]},{\"name\":\"coverageDepth\",\"type\":[\"null\",\"string\"]},{\"name\":\"notes\",\"type\":[\"null\",\"string\"]},{\"name\":\"publisherName\",\"type\":[\"null\",\"string\"]},{\"name\":\"publicationType\",\"type\":[\"null\",\"string\"]},{\"name\":\"dateMonographPublishedPrint\",\"type\":[\"null\",\"string\"]},{\"name\":\"dateMonographPublishedOnline\",\"type\":[\"null\",\"string\"]},{\"name\":\"monographVolume\",\"type\":[\"null\",\"int\"]},{\"name\":\"monographEdition\",\"type\":[\"null\",\"string\"]},{\"name\":\"firstEditor\",\"type\":[\"null\",\"string\"]},{\"name\":\"parentPublicationTitleId\",\"type\":[\"null\",\"string\"]},{\"name\":\"precedingPublicationTitleId\",\"type\":[\"null\",\"string\"]},{\"name\":\"accessType\",\"type\":[\"null\",\"string\"]},{\"name\":\"providerPackagePackage\",\"type\":\"string\"},{\"name\":\"providerPackageDateP\",\"type\":{\"type\":\"int\",\"logicalType\":\"date\"}},{\"name\":\"providerPackageIdtProvider\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
  }

  private static final BinaryMessageEncoder<LigneKbartImprime> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LigneKbartImprime> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LigneKbartImprime> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LigneKbartImprime> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LigneKbartImprime> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LigneKbartImprime to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LigneKbartImprime from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LigneKbartImprime instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LigneKbartImprime fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private CharSequence ppn;
  private CharSequence publicationTitle;
  private CharSequence printIdentifier;
  private CharSequence onlineIdentifier;
  private CharSequence dateFirstIssueOnline;
  private Integer numFirstVolOnline;
  private Integer numFirstIssueOnline;
  private CharSequence dateLastIssueOnline;
  private Integer numLastVolOnline;
  private Integer numLastIssueOnline;
  private CharSequence titleUrl;
  private CharSequence firstAuthor;
  private CharSequence titleId;
  private CharSequence embargoInfo;
  private CharSequence coverageDepth;
  private CharSequence notes;
  private CharSequence publisherName;
  private CharSequence publicationType;
  private CharSequence dateMonographPublishedPrint;
  private CharSequence dateMonographPublishedOnline;
  private Integer monographVolume;
  private CharSequence monographEdition;
  private CharSequence firstEditor;
  private CharSequence parentPublicationTitleId;
  private CharSequence precedingPublicationTitleId;
  private CharSequence accessType;
  private CharSequence providerPackagePackage;
  private java.time.LocalDate providerPackageDateP;
  private int providerPackageIdtProvider;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LigneKbartImprime() {}

  /**
   * All-args constructor.
   * @param ppn The new value for ppn
   * @param publicationTitle The new value for publicationTitle
   * @param printIdentifier The new value for printIdentifier
   * @param onlineIdentifier The new value for onlineIdentifier
   * @param dateFirstIssueOnline The new value for dateFirstIssueOnline
   * @param numFirstVolOnline The new value for numFirstVolOnline
   * @param numFirstIssueOnline The new value for numFirstIssueOnline
   * @param dateLastIssueOnline The new value for dateLastIssueOnline
   * @param numLastVolOnline The new value for numLastVolOnline
   * @param numLastIssueOnline The new value for numLastIssueOnline
   * @param titleUrl The new value for titleUrl
   * @param firstAuthor The new value for firstAuthor
   * @param titleId The new value for titleId
   * @param embargoInfo The new value for embargoInfo
   * @param coverageDepth The new value for coverageDepth
   * @param notes The new value for notes
   * @param publisherName The new value for publisherName
   * @param publicationType The new value for publicationType
   * @param dateMonographPublishedPrint The new value for dateMonographPublishedPrint
   * @param dateMonographPublishedOnline The new value for dateMonographPublishedOnline
   * @param monographVolume The new value for monographVolume
   * @param monographEdition The new value for monographEdition
   * @param firstEditor The new value for firstEditor
   * @param parentPublicationTitleId The new value for parentPublicationTitleId
   * @param precedingPublicationTitleId The new value for precedingPublicationTitleId
   * @param accessType The new value for accessType
   * @param providerPackagePackage The new value for providerPackagePackage
   * @param providerPackageDateP The new value for providerPackageDateP
   * @param providerPackageIdtProvider The new value for providerPackageIdtProvider
   */
  public LigneKbartImprime(CharSequence ppn, CharSequence publicationTitle, CharSequence printIdentifier, CharSequence onlineIdentifier, CharSequence dateFirstIssueOnline, Integer numFirstVolOnline, Integer numFirstIssueOnline, CharSequence dateLastIssueOnline, Integer numLastVolOnline, Integer numLastIssueOnline, CharSequence titleUrl, CharSequence firstAuthor, CharSequence titleId, CharSequence embargoInfo, CharSequence coverageDepth, CharSequence notes, CharSequence publisherName, CharSequence publicationType, CharSequence dateMonographPublishedPrint, CharSequence dateMonographPublishedOnline, Integer monographVolume, CharSequence monographEdition, CharSequence firstEditor, CharSequence parentPublicationTitleId, CharSequence precedingPublicationTitleId, CharSequence accessType, CharSequence providerPackagePackage, java.time.LocalDate providerPackageDateP, Integer providerPackageIdtProvider) {
    this.ppn = ppn;
    this.publicationTitle = publicationTitle;
    this.printIdentifier = printIdentifier;
    this.onlineIdentifier = onlineIdentifier;
    this.dateFirstIssueOnline = dateFirstIssueOnline;
    this.numFirstVolOnline = numFirstVolOnline;
    this.numFirstIssueOnline = numFirstIssueOnline;
    this.dateLastIssueOnline = dateLastIssueOnline;
    this.numLastVolOnline = numLastVolOnline;
    this.numLastIssueOnline = numLastIssueOnline;
    this.titleUrl = titleUrl;
    this.firstAuthor = firstAuthor;
    this.titleId = titleId;
    this.embargoInfo = embargoInfo;
    this.coverageDepth = coverageDepth;
    this.notes = notes;
    this.publisherName = publisherName;
    this.publicationType = publicationType;
    this.dateMonographPublishedPrint = dateMonographPublishedPrint;
    this.dateMonographPublishedOnline = dateMonographPublishedOnline;
    this.monographVolume = monographVolume;
    this.monographEdition = monographEdition;
    this.firstEditor = firstEditor;
    this.parentPublicationTitleId = parentPublicationTitleId;
    this.precedingPublicationTitleId = precedingPublicationTitleId;
    this.accessType = accessType;
    this.providerPackagePackage = providerPackagePackage;
    this.providerPackageDateP = providerPackageDateP;
    this.providerPackageIdtProvider = providerPackageIdtProvider;
  }

  @Override
  public SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public Object get(int field$) {
    switch (field$) {
    case 0: return ppn;
    case 1: return publicationTitle;
    case 2: return printIdentifier;
    case 3: return onlineIdentifier;
    case 4: return dateFirstIssueOnline;
    case 5: return numFirstVolOnline;
    case 6: return numFirstIssueOnline;
    case 7: return dateLastIssueOnline;
    case 8: return numLastVolOnline;
    case 9: return numLastIssueOnline;
    case 10: return titleUrl;
    case 11: return firstAuthor;
    case 12: return titleId;
    case 13: return embargoInfo;
    case 14: return coverageDepth;
    case 15: return notes;
    case 16: return publisherName;
    case 17: return publicationType;
    case 18: return dateMonographPublishedPrint;
    case 19: return dateMonographPublishedOnline;
    case 20: return monographVolume;
    case 21: return monographEdition;
    case 22: return firstEditor;
    case 23: return parentPublicationTitleId;
    case 24: return precedingPublicationTitleId;
    case 25: return accessType;
    case 26: return providerPackagePackage;
    case 27: return providerPackageDateP;
    case 28: return providerPackageIdtProvider;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  private static final org.apache.avro.Conversion<?>[] conversions =
      new org.apache.avro.Conversion<?>[] {
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      null,
      new org.apache.avro.data.TimeConversions.DateConversion(),
      null,
      null
  };

  @Override
  public org.apache.avro.Conversion<?> getConversion(int field) {
    return conversions[field];
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: ppn = (CharSequence)value$; break;
    case 1: publicationTitle = (CharSequence)value$; break;
    case 2: printIdentifier = (CharSequence)value$; break;
    case 3: onlineIdentifier = (CharSequence)value$; break;
    case 4: dateFirstIssueOnline = (CharSequence)value$; break;
    case 5: numFirstVolOnline = (Integer)value$; break;
    case 6: numFirstIssueOnline = (Integer)value$; break;
    case 7: dateLastIssueOnline = (CharSequence)value$; break;
    case 8: numLastVolOnline = (Integer)value$; break;
    case 9: numLastIssueOnline = (Integer)value$; break;
    case 10: titleUrl = (CharSequence)value$; break;
    case 11: firstAuthor = (CharSequence)value$; break;
    case 12: titleId = (CharSequence)value$; break;
    case 13: embargoInfo = (CharSequence)value$; break;
    case 14: coverageDepth = (CharSequence)value$; break;
    case 15: notes = (CharSequence)value$; break;
    case 16: publisherName = (CharSequence)value$; break;
    case 17: publicationType = (CharSequence)value$; break;
    case 18: dateMonographPublishedPrint = (CharSequence)value$; break;
    case 19: dateMonographPublishedOnline = (CharSequence)value$; break;
    case 20: monographVolume = (Integer)value$; break;
    case 21: monographEdition = (CharSequence)value$; break;
    case 22: firstEditor = (CharSequence)value$; break;
    case 23: parentPublicationTitleId = (CharSequence)value$; break;
    case 24: precedingPublicationTitleId = (CharSequence)value$; break;
    case 25: accessType = (CharSequence)value$; break;
    case 26: providerPackagePackage = (CharSequence)value$; break;
    case 27: providerPackageDateP = (java.time.LocalDate)value$; break;
    case 28: providerPackageIdtProvider = (Integer)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'ppn' field.
   * @return The value of the 'ppn' field.
   */
  public CharSequence getPpn() {
    return ppn;
  }


  /**
   * Sets the value of the 'ppn' field.
   * @param value the value to set.
   */
  public void setPpn(CharSequence value) {
    this.ppn = value;
  }

  /**
   * Gets the value of the 'publicationTitle' field.
   * @return The value of the 'publicationTitle' field.
   */
  public CharSequence getPublicationTitle() {
    return publicationTitle;
  }


  /**
   * Sets the value of the 'publicationTitle' field.
   * @param value the value to set.
   */
  public void setPublicationTitle(CharSequence value) {
    this.publicationTitle = value;
  }

  /**
   * Gets the value of the 'printIdentifier' field.
   * @return The value of the 'printIdentifier' field.
   */
  public CharSequence getPrintIdentifier() {
    return printIdentifier;
  }


  /**
   * Sets the value of the 'printIdentifier' field.
   * @param value the value to set.
   */
  public void setPrintIdentifier(CharSequence value) {
    this.printIdentifier = value;
  }

  /**
   * Gets the value of the 'onlineIdentifier' field.
   * @return The value of the 'onlineIdentifier' field.
   */
  public CharSequence getOnlineIdentifier() {
    return onlineIdentifier;
  }


  /**
   * Sets the value of the 'onlineIdentifier' field.
   * @param value the value to set.
   */
  public void setOnlineIdentifier(CharSequence value) {
    this.onlineIdentifier = value;
  }

  /**
   * Gets the value of the 'dateFirstIssueOnline' field.
   * @return The value of the 'dateFirstIssueOnline' field.
   */
  public CharSequence getDateFirstIssueOnline() {
    return dateFirstIssueOnline;
  }


  /**
   * Sets the value of the 'dateFirstIssueOnline' field.
   * @param value the value to set.
   */
  public void setDateFirstIssueOnline(CharSequence value) {
    this.dateFirstIssueOnline = value;
  }

  /**
   * Gets the value of the 'numFirstVolOnline' field.
   * @return The value of the 'numFirstVolOnline' field.
   */
  public Integer getNumFirstVolOnline() {
    return numFirstVolOnline;
  }


  /**
   * Sets the value of the 'numFirstVolOnline' field.
   * @param value the value to set.
   */
  public void setNumFirstVolOnline(Integer value) {
    this.numFirstVolOnline = value;
  }

  /**
   * Gets the value of the 'numFirstIssueOnline' field.
   * @return The value of the 'numFirstIssueOnline' field.
   */
  public Integer getNumFirstIssueOnline() {
    return numFirstIssueOnline;
  }


  /**
   * Sets the value of the 'numFirstIssueOnline' field.
   * @param value the value to set.
   */
  public void setNumFirstIssueOnline(Integer value) {
    this.numFirstIssueOnline = value;
  }

  /**
   * Gets the value of the 'dateLastIssueOnline' field.
   * @return The value of the 'dateLastIssueOnline' field.
   */
  public CharSequence getDateLastIssueOnline() {
    return dateLastIssueOnline;
  }


  /**
   * Sets the value of the 'dateLastIssueOnline' field.
   * @param value the value to set.
   */
  public void setDateLastIssueOnline(CharSequence value) {
    this.dateLastIssueOnline = value;
  }

  /**
   * Gets the value of the 'numLastVolOnline' field.
   * @return The value of the 'numLastVolOnline' field.
   */
  public Integer getNumLastVolOnline() {
    return numLastVolOnline;
  }


  /**
   * Sets the value of the 'numLastVolOnline' field.
   * @param value the value to set.
   */
  public void setNumLastVolOnline(Integer value) {
    this.numLastVolOnline = value;
  }

  /**
   * Gets the value of the 'numLastIssueOnline' field.
   * @return The value of the 'numLastIssueOnline' field.
   */
  public Integer getNumLastIssueOnline() {
    return numLastIssueOnline;
  }


  /**
   * Sets the value of the 'numLastIssueOnline' field.
   * @param value the value to set.
   */
  public void setNumLastIssueOnline(Integer value) {
    this.numLastIssueOnline = value;
  }

  /**
   * Gets the value of the 'titleUrl' field.
   * @return The value of the 'titleUrl' field.
   */
  public CharSequence getTitleUrl() {
    return titleUrl;
  }


  /**
   * Sets the value of the 'titleUrl' field.
   * @param value the value to set.
   */
  public void setTitleUrl(CharSequence value) {
    this.titleUrl = value;
  }

  /**
   * Gets the value of the 'firstAuthor' field.
   * @return The value of the 'firstAuthor' field.
   */
  public CharSequence getFirstAuthor() {
    return firstAuthor;
  }


  /**
   * Sets the value of the 'firstAuthor' field.
   * @param value the value to set.
   */
  public void setFirstAuthor(CharSequence value) {
    this.firstAuthor = value;
  }

  /**
   * Gets the value of the 'titleId' field.
   * @return The value of the 'titleId' field.
   */
  public CharSequence getTitleId() {
    return titleId;
  }


  /**
   * Sets the value of the 'titleId' field.
   * @param value the value to set.
   */
  public void setTitleId(CharSequence value) {
    this.titleId = value;
  }

  /**
   * Gets the value of the 'embargoInfo' field.
   * @return The value of the 'embargoInfo' field.
   */
  public CharSequence getEmbargoInfo() {
    return embargoInfo;
  }


  /**
   * Sets the value of the 'embargoInfo' field.
   * @param value the value to set.
   */
  public void setEmbargoInfo(CharSequence value) {
    this.embargoInfo = value;
  }

  /**
   * Gets the value of the 'coverageDepth' field.
   * @return The value of the 'coverageDepth' field.
   */
  public CharSequence getCoverageDepth() {
    return coverageDepth;
  }


  /**
   * Sets the value of the 'coverageDepth' field.
   * @param value the value to set.
   */
  public void setCoverageDepth(CharSequence value) {
    this.coverageDepth = value;
  }

  /**
   * Gets the value of the 'notes' field.
   * @return The value of the 'notes' field.
   */
  public CharSequence getNotes() {
    return notes;
  }


  /**
   * Sets the value of the 'notes' field.
   * @param value the value to set.
   */
  public void setNotes(CharSequence value) {
    this.notes = value;
  }

  /**
   * Gets the value of the 'publisherName' field.
   * @return The value of the 'publisherName' field.
   */
  public CharSequence getPublisherName() {
    return publisherName;
  }


  /**
   * Sets the value of the 'publisherName' field.
   * @param value the value to set.
   */
  public void setPublisherName(CharSequence value) {
    this.publisherName = value;
  }

  /**
   * Gets the value of the 'publicationType' field.
   * @return The value of the 'publicationType' field.
   */
  public CharSequence getPublicationType() {
    return publicationType;
  }


  /**
   * Sets the value of the 'publicationType' field.
   * @param value the value to set.
   */
  public void setPublicationType(CharSequence value) {
    this.publicationType = value;
  }

  /**
   * Gets the value of the 'dateMonographPublishedPrint' field.
   * @return The value of the 'dateMonographPublishedPrint' field.
   */
  public CharSequence getDateMonographPublishedPrint() {
    return dateMonographPublishedPrint;
  }


  /**
   * Sets the value of the 'dateMonographPublishedPrint' field.
   * @param value the value to set.
   */
  public void setDateMonographPublishedPrint(CharSequence value) {
    this.dateMonographPublishedPrint = value;
  }

  /**
   * Gets the value of the 'dateMonographPublishedOnline' field.
   * @return The value of the 'dateMonographPublishedOnline' field.
   */
  public CharSequence getDateMonographPublishedOnline() {
    return dateMonographPublishedOnline;
  }


  /**
   * Sets the value of the 'dateMonographPublishedOnline' field.
   * @param value the value to set.
   */
  public void setDateMonographPublishedOnline(CharSequence value) {
    this.dateMonographPublishedOnline = value;
  }

  /**
   * Gets the value of the 'monographVolume' field.
   * @return The value of the 'monographVolume' field.
   */
  public Integer getMonographVolume() {
    return monographVolume;
  }


  /**
   * Sets the value of the 'monographVolume' field.
   * @param value the value to set.
   */
  public void setMonographVolume(Integer value) {
    this.monographVolume = value;
  }

  /**
   * Gets the value of the 'monographEdition' field.
   * @return The value of the 'monographEdition' field.
   */
  public CharSequence getMonographEdition() {
    return monographEdition;
  }


  /**
   * Sets the value of the 'monographEdition' field.
   * @param value the value to set.
   */
  public void setMonographEdition(CharSequence value) {
    this.monographEdition = value;
  }

  /**
   * Gets the value of the 'firstEditor' field.
   * @return The value of the 'firstEditor' field.
   */
  public CharSequence getFirstEditor() {
    return firstEditor;
  }


  /**
   * Sets the value of the 'firstEditor' field.
   * @param value the value to set.
   */
  public void setFirstEditor(CharSequence value) {
    this.firstEditor = value;
  }

  /**
   * Gets the value of the 'parentPublicationTitleId' field.
   * @return The value of the 'parentPublicationTitleId' field.
   */
  public CharSequence getParentPublicationTitleId() {
    return parentPublicationTitleId;
  }


  /**
   * Sets the value of the 'parentPublicationTitleId' field.
   * @param value the value to set.
   */
  public void setParentPublicationTitleId(CharSequence value) {
    this.parentPublicationTitleId = value;
  }

  /**
   * Gets the value of the 'precedingPublicationTitleId' field.
   * @return The value of the 'precedingPublicationTitleId' field.
   */
  public CharSequence getPrecedingPublicationTitleId() {
    return precedingPublicationTitleId;
  }


  /**
   * Sets the value of the 'precedingPublicationTitleId' field.
   * @param value the value to set.
   */
  public void setPrecedingPublicationTitleId(CharSequence value) {
    this.precedingPublicationTitleId = value;
  }

  /**
   * Gets the value of the 'accessType' field.
   * @return The value of the 'accessType' field.
   */
  public CharSequence getAccessType() {
    return accessType;
  }


  /**
   * Sets the value of the 'accessType' field.
   * @param value the value to set.
   */
  public void setAccessType(CharSequence value) {
    this.accessType = value;
  }

  /**
   * Gets the value of the 'providerPackagePackage' field.
   * @return The value of the 'providerPackagePackage' field.
   */
  public CharSequence getProviderPackagePackage() {
    return providerPackagePackage;
  }


  /**
   * Sets the value of the 'providerPackagePackage' field.
   * @param value the value to set.
   */
  public void setProviderPackagePackage(CharSequence value) {
    this.providerPackagePackage = value;
  }

  /**
   * Gets the value of the 'providerPackageDateP' field.
   * @return The value of the 'providerPackageDateP' field.
   */
  public java.time.LocalDate getProviderPackageDateP() {
    return providerPackageDateP;
  }


  /**
   * Sets the value of the 'providerPackageDateP' field.
   * @param value the value to set.
   */
  public void setProviderPackageDateP(java.time.LocalDate value) {
    this.providerPackageDateP = value;
  }

  /**
   * Gets the value of the 'providerPackageIdtProvider' field.
   * @return The value of the 'providerPackageIdtProvider' field.
   */
  public int getProviderPackageIdtProvider() {
    return providerPackageIdtProvider;
  }


  /**
   * Sets the value of the 'providerPackageIdtProvider' field.
   * @param value the value to set.
   */
  public void setProviderPackageIdtProvider(int value) {
    this.providerPackageIdtProvider = value;
  }

  /**
   * Creates a new LigneKbartImprime RecordBuilder.
   * @return A new LigneKbartImprime RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new LigneKbartImprime RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LigneKbartImprime RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * Creates a new LigneKbartImprime RecordBuilder by copying an existing LigneKbartImprime instance.
   * @param other The existing instance to copy.
   * @return A new LigneKbartImprime RecordBuilder
   */
  public static Builder newBuilder(LigneKbartImprime other) {
    if (other == null) {
      return new Builder();
    } else {
      return new Builder(other);
    }
  }

  /**
   * RecordBuilder for LigneKbartImprime instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LigneKbartImprime>
    implements org.apache.avro.data.RecordBuilder<LigneKbartImprime> {

    private CharSequence ppn;
    private CharSequence publicationTitle;
    private CharSequence printIdentifier;
    private CharSequence onlineIdentifier;
    private CharSequence dateFirstIssueOnline;
    private Integer numFirstVolOnline;
    private Integer numFirstIssueOnline;
    private CharSequence dateLastIssueOnline;
    private Integer numLastVolOnline;
    private Integer numLastIssueOnline;
    private CharSequence titleUrl;
    private CharSequence firstAuthor;
    private CharSequence titleId;
    private CharSequence embargoInfo;
    private CharSequence coverageDepth;
    private CharSequence notes;
    private CharSequence publisherName;
    private CharSequence publicationType;
    private CharSequence dateMonographPublishedPrint;
    private CharSequence dateMonographPublishedOnline;
    private Integer monographVolume;
    private CharSequence monographEdition;
    private CharSequence firstEditor;
    private CharSequence parentPublicationTitleId;
    private CharSequence precedingPublicationTitleId;
    private CharSequence accessType;
    private CharSequence providerPackagePackage;
    private java.time.LocalDate providerPackageDateP;
    private int providerPackageIdtProvider;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.ppn)) {
        this.ppn = data().deepCopy(fields()[0].schema(), other.ppn);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.publicationTitle)) {
        this.publicationTitle = data().deepCopy(fields()[1].schema(), other.publicationTitle);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.printIdentifier)) {
        this.printIdentifier = data().deepCopy(fields()[2].schema(), other.printIdentifier);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.onlineIdentifier)) {
        this.onlineIdentifier = data().deepCopy(fields()[3].schema(), other.onlineIdentifier);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.dateFirstIssueOnline)) {
        this.dateFirstIssueOnline = data().deepCopy(fields()[4].schema(), other.dateFirstIssueOnline);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.numFirstVolOnline)) {
        this.numFirstVolOnline = data().deepCopy(fields()[5].schema(), other.numFirstVolOnline);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.numFirstIssueOnline)) {
        this.numFirstIssueOnline = data().deepCopy(fields()[6].schema(), other.numFirstIssueOnline);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.dateLastIssueOnline)) {
        this.dateLastIssueOnline = data().deepCopy(fields()[7].schema(), other.dateLastIssueOnline);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.numLastVolOnline)) {
        this.numLastVolOnline = data().deepCopy(fields()[8].schema(), other.numLastVolOnline);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.numLastIssueOnline)) {
        this.numLastIssueOnline = data().deepCopy(fields()[9].schema(), other.numLastIssueOnline);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.titleUrl)) {
        this.titleUrl = data().deepCopy(fields()[10].schema(), other.titleUrl);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.firstAuthor)) {
        this.firstAuthor = data().deepCopy(fields()[11].schema(), other.firstAuthor);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.titleId)) {
        this.titleId = data().deepCopy(fields()[12].schema(), other.titleId);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.embargoInfo)) {
        this.embargoInfo = data().deepCopy(fields()[13].schema(), other.embargoInfo);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.coverageDepth)) {
        this.coverageDepth = data().deepCopy(fields()[14].schema(), other.coverageDepth);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.notes)) {
        this.notes = data().deepCopy(fields()[15].schema(), other.notes);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.publisherName)) {
        this.publisherName = data().deepCopy(fields()[16].schema(), other.publisherName);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.publicationType)) {
        this.publicationType = data().deepCopy(fields()[17].schema(), other.publicationType);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.dateMonographPublishedPrint)) {
        this.dateMonographPublishedPrint = data().deepCopy(fields()[18].schema(), other.dateMonographPublishedPrint);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.dateMonographPublishedOnline)) {
        this.dateMonographPublishedOnline = data().deepCopy(fields()[19].schema(), other.dateMonographPublishedOnline);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
      if (isValidValue(fields()[20], other.monographVolume)) {
        this.monographVolume = data().deepCopy(fields()[20].schema(), other.monographVolume);
        fieldSetFlags()[20] = other.fieldSetFlags()[20];
      }
      if (isValidValue(fields()[21], other.monographEdition)) {
        this.monographEdition = data().deepCopy(fields()[21].schema(), other.monographEdition);
        fieldSetFlags()[21] = other.fieldSetFlags()[21];
      }
      if (isValidValue(fields()[22], other.firstEditor)) {
        this.firstEditor = data().deepCopy(fields()[22].schema(), other.firstEditor);
        fieldSetFlags()[22] = other.fieldSetFlags()[22];
      }
      if (isValidValue(fields()[23], other.parentPublicationTitleId)) {
        this.parentPublicationTitleId = data().deepCopy(fields()[23].schema(), other.parentPublicationTitleId);
        fieldSetFlags()[23] = other.fieldSetFlags()[23];
      }
      if (isValidValue(fields()[24], other.precedingPublicationTitleId)) {
        this.precedingPublicationTitleId = data().deepCopy(fields()[24].schema(), other.precedingPublicationTitleId);
        fieldSetFlags()[24] = other.fieldSetFlags()[24];
      }
      if (isValidValue(fields()[25], other.accessType)) {
        this.accessType = data().deepCopy(fields()[25].schema(), other.accessType);
        fieldSetFlags()[25] = other.fieldSetFlags()[25];
      }
      if (isValidValue(fields()[26], other.providerPackagePackage)) {
        this.providerPackagePackage = data().deepCopy(fields()[26].schema(), other.providerPackagePackage);
        fieldSetFlags()[26] = other.fieldSetFlags()[26];
      }
      if (isValidValue(fields()[27], other.providerPackageDateP)) {
        this.providerPackageDateP = data().deepCopy(fields()[27].schema(), other.providerPackageDateP);
        fieldSetFlags()[27] = other.fieldSetFlags()[27];
      }
      if (isValidValue(fields()[28], other.providerPackageIdtProvider)) {
        this.providerPackageIdtProvider = data().deepCopy(fields()[28].schema(), other.providerPackageIdtProvider);
        fieldSetFlags()[28] = other.fieldSetFlags()[28];
      }
    }

    /**
     * Creates a Builder by copying an existing LigneKbartImprime instance
     * @param other The existing instance to copy.
     */
    private Builder(LigneKbartImprime other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.ppn)) {
        this.ppn = data().deepCopy(fields()[0].schema(), other.ppn);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.publicationTitle)) {
        this.publicationTitle = data().deepCopy(fields()[1].schema(), other.publicationTitle);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.printIdentifier)) {
        this.printIdentifier = data().deepCopy(fields()[2].schema(), other.printIdentifier);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.onlineIdentifier)) {
        this.onlineIdentifier = data().deepCopy(fields()[3].schema(), other.onlineIdentifier);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dateFirstIssueOnline)) {
        this.dateFirstIssueOnline = data().deepCopy(fields()[4].schema(), other.dateFirstIssueOnline);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.numFirstVolOnline)) {
        this.numFirstVolOnline = data().deepCopy(fields()[5].schema(), other.numFirstVolOnline);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.numFirstIssueOnline)) {
        this.numFirstIssueOnline = data().deepCopy(fields()[6].schema(), other.numFirstIssueOnline);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.dateLastIssueOnline)) {
        this.dateLastIssueOnline = data().deepCopy(fields()[7].schema(), other.dateLastIssueOnline);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.numLastVolOnline)) {
        this.numLastVolOnline = data().deepCopy(fields()[8].schema(), other.numLastVolOnline);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.numLastIssueOnline)) {
        this.numLastIssueOnline = data().deepCopy(fields()[9].schema(), other.numLastIssueOnline);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.titleUrl)) {
        this.titleUrl = data().deepCopy(fields()[10].schema(), other.titleUrl);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.firstAuthor)) {
        this.firstAuthor = data().deepCopy(fields()[11].schema(), other.firstAuthor);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.titleId)) {
        this.titleId = data().deepCopy(fields()[12].schema(), other.titleId);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.embargoInfo)) {
        this.embargoInfo = data().deepCopy(fields()[13].schema(), other.embargoInfo);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.coverageDepth)) {
        this.coverageDepth = data().deepCopy(fields()[14].schema(), other.coverageDepth);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.notes)) {
        this.notes = data().deepCopy(fields()[15].schema(), other.notes);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.publisherName)) {
        this.publisherName = data().deepCopy(fields()[16].schema(), other.publisherName);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.publicationType)) {
        this.publicationType = data().deepCopy(fields()[17].schema(), other.publicationType);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.dateMonographPublishedPrint)) {
        this.dateMonographPublishedPrint = data().deepCopy(fields()[18].schema(), other.dateMonographPublishedPrint);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.dateMonographPublishedOnline)) {
        this.dateMonographPublishedOnline = data().deepCopy(fields()[19].schema(), other.dateMonographPublishedOnline);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.monographVolume)) {
        this.monographVolume = data().deepCopy(fields()[20].schema(), other.monographVolume);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.monographEdition)) {
        this.monographEdition = data().deepCopy(fields()[21].schema(), other.monographEdition);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.firstEditor)) {
        this.firstEditor = data().deepCopy(fields()[22].schema(), other.firstEditor);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.parentPublicationTitleId)) {
        this.parentPublicationTitleId = data().deepCopy(fields()[23].schema(), other.parentPublicationTitleId);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.precedingPublicationTitleId)) {
        this.precedingPublicationTitleId = data().deepCopy(fields()[24].schema(), other.precedingPublicationTitleId);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.accessType)) {
        this.accessType = data().deepCopy(fields()[25].schema(), other.accessType);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.providerPackagePackage)) {
        this.providerPackagePackage = data().deepCopy(fields()[26].schema(), other.providerPackagePackage);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.providerPackageDateP)) {
        this.providerPackageDateP = data().deepCopy(fields()[27].schema(), other.providerPackageDateP);
        fieldSetFlags()[27] = true;
      }
      if (isValidValue(fields()[28], other.providerPackageIdtProvider)) {
        this.providerPackageIdtProvider = data().deepCopy(fields()[28].schema(), other.providerPackageIdtProvider);
        fieldSetFlags()[28] = true;
      }
    }

    /**
      * Gets the value of the 'ppn' field.
      * @return The value.
      */
    public CharSequence getPpn() {
      return ppn;
    }


    /**
      * Sets the value of the 'ppn' field.
      * @param value The value of 'ppn'.
      * @return This builder.
      */
    public Builder setPpn(CharSequence value) {
      validate(fields()[0], value);
      this.ppn = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'ppn' field has been set.
      * @return True if the 'ppn' field has been set, false otherwise.
      */
    public boolean hasPpn() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'ppn' field.
      * @return This builder.
      */
    public Builder clearPpn() {
      ppn = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'publicationTitle' field.
      * @return The value.
      */
    public CharSequence getPublicationTitle() {
      return publicationTitle;
    }


    /**
      * Sets the value of the 'publicationTitle' field.
      * @param value The value of 'publicationTitle'.
      * @return This builder.
      */
    public Builder setPublicationTitle(CharSequence value) {
      validate(fields()[1], value);
      this.publicationTitle = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'publicationTitle' field has been set.
      * @return True if the 'publicationTitle' field has been set, false otherwise.
      */
    public boolean hasPublicationTitle() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'publicationTitle' field.
      * @return This builder.
      */
    public Builder clearPublicationTitle() {
      publicationTitle = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'printIdentifier' field.
      * @return The value.
      */
    public CharSequence getPrintIdentifier() {
      return printIdentifier;
    }


    /**
      * Sets the value of the 'printIdentifier' field.
      * @param value The value of 'printIdentifier'.
      * @return This builder.
      */
    public Builder setPrintIdentifier(CharSequence value) {
      validate(fields()[2], value);
      this.printIdentifier = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'printIdentifier' field has been set.
      * @return True if the 'printIdentifier' field has been set, false otherwise.
      */
    public boolean hasPrintIdentifier() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'printIdentifier' field.
      * @return This builder.
      */
    public Builder clearPrintIdentifier() {
      printIdentifier = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'onlineIdentifier' field.
      * @return The value.
      */
    public CharSequence getOnlineIdentifier() {
      return onlineIdentifier;
    }


    /**
      * Sets the value of the 'onlineIdentifier' field.
      * @param value The value of 'onlineIdentifier'.
      * @return This builder.
      */
    public Builder setOnlineIdentifier(CharSequence value) {
      validate(fields()[3], value);
      this.onlineIdentifier = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'onlineIdentifier' field has been set.
      * @return True if the 'onlineIdentifier' field has been set, false otherwise.
      */
    public boolean hasOnlineIdentifier() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'onlineIdentifier' field.
      * @return This builder.
      */
    public Builder clearOnlineIdentifier() {
      onlineIdentifier = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateFirstIssueOnline' field.
      * @return The value.
      */
    public CharSequence getDateFirstIssueOnline() {
      return dateFirstIssueOnline;
    }


    /**
      * Sets the value of the 'dateFirstIssueOnline' field.
      * @param value The value of 'dateFirstIssueOnline'.
      * @return This builder.
      */
    public Builder setDateFirstIssueOnline(CharSequence value) {
      validate(fields()[4], value);
      this.dateFirstIssueOnline = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dateFirstIssueOnline' field has been set.
      * @return True if the 'dateFirstIssueOnline' field has been set, false otherwise.
      */
    public boolean hasDateFirstIssueOnline() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dateFirstIssueOnline' field.
      * @return This builder.
      */
    public Builder clearDateFirstIssueOnline() {
      dateFirstIssueOnline = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'numFirstVolOnline' field.
      * @return The value.
      */
    public Integer getNumFirstVolOnline() {
      return numFirstVolOnline;
    }


    /**
      * Sets the value of the 'numFirstVolOnline' field.
      * @param value The value of 'numFirstVolOnline'.
      * @return This builder.
      */
    public Builder setNumFirstVolOnline(Integer value) {
      validate(fields()[5], value);
      this.numFirstVolOnline = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'numFirstVolOnline' field has been set.
      * @return True if the 'numFirstVolOnline' field has been set, false otherwise.
      */
    public boolean hasNumFirstVolOnline() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'numFirstVolOnline' field.
      * @return This builder.
      */
    public Builder clearNumFirstVolOnline() {
      numFirstVolOnline = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'numFirstIssueOnline' field.
      * @return The value.
      */
    public Integer getNumFirstIssueOnline() {
      return numFirstIssueOnline;
    }


    /**
      * Sets the value of the 'numFirstIssueOnline' field.
      * @param value The value of 'numFirstIssueOnline'.
      * @return This builder.
      */
    public Builder setNumFirstIssueOnline(Integer value) {
      validate(fields()[6], value);
      this.numFirstIssueOnline = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'numFirstIssueOnline' field has been set.
      * @return True if the 'numFirstIssueOnline' field has been set, false otherwise.
      */
    public boolean hasNumFirstIssueOnline() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'numFirstIssueOnline' field.
      * @return This builder.
      */
    public Builder clearNumFirstIssueOnline() {
      numFirstIssueOnline = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateLastIssueOnline' field.
      * @return The value.
      */
    public CharSequence getDateLastIssueOnline() {
      return dateLastIssueOnline;
    }


    /**
      * Sets the value of the 'dateLastIssueOnline' field.
      * @param value The value of 'dateLastIssueOnline'.
      * @return This builder.
      */
    public Builder setDateLastIssueOnline(CharSequence value) {
      validate(fields()[7], value);
      this.dateLastIssueOnline = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'dateLastIssueOnline' field has been set.
      * @return True if the 'dateLastIssueOnline' field has been set, false otherwise.
      */
    public boolean hasDateLastIssueOnline() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'dateLastIssueOnline' field.
      * @return This builder.
      */
    public Builder clearDateLastIssueOnline() {
      dateLastIssueOnline = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'numLastVolOnline' field.
      * @return The value.
      */
    public Integer getNumLastVolOnline() {
      return numLastVolOnline;
    }


    /**
      * Sets the value of the 'numLastVolOnline' field.
      * @param value The value of 'numLastVolOnline'.
      * @return This builder.
      */
    public Builder setNumLastVolOnline(Integer value) {
      validate(fields()[8], value);
      this.numLastVolOnline = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'numLastVolOnline' field has been set.
      * @return True if the 'numLastVolOnline' field has been set, false otherwise.
      */
    public boolean hasNumLastVolOnline() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'numLastVolOnline' field.
      * @return This builder.
      */
    public Builder clearNumLastVolOnline() {
      numLastVolOnline = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'numLastIssueOnline' field.
      * @return The value.
      */
    public Integer getNumLastIssueOnline() {
      return numLastIssueOnline;
    }


    /**
      * Sets the value of the 'numLastIssueOnline' field.
      * @param value The value of 'numLastIssueOnline'.
      * @return This builder.
      */
    public Builder setNumLastIssueOnline(Integer value) {
      validate(fields()[9], value);
      this.numLastIssueOnline = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'numLastIssueOnline' field has been set.
      * @return True if the 'numLastIssueOnline' field has been set, false otherwise.
      */
    public boolean hasNumLastIssueOnline() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'numLastIssueOnline' field.
      * @return This builder.
      */
    public Builder clearNumLastIssueOnline() {
      numLastIssueOnline = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'titleUrl' field.
      * @return The value.
      */
    public CharSequence getTitleUrl() {
      return titleUrl;
    }


    /**
      * Sets the value of the 'titleUrl' field.
      * @param value The value of 'titleUrl'.
      * @return This builder.
      */
    public Builder setTitleUrl(CharSequence value) {
      validate(fields()[10], value);
      this.titleUrl = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'titleUrl' field has been set.
      * @return True if the 'titleUrl' field has been set, false otherwise.
      */
    public boolean hasTitleUrl() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'titleUrl' field.
      * @return This builder.
      */
    public Builder clearTitleUrl() {
      titleUrl = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstAuthor' field.
      * @return The value.
      */
    public CharSequence getFirstAuthor() {
      return firstAuthor;
    }


    /**
      * Sets the value of the 'firstAuthor' field.
      * @param value The value of 'firstAuthor'.
      * @return This builder.
      */
    public Builder setFirstAuthor(CharSequence value) {
      validate(fields()[11], value);
      this.firstAuthor = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'firstAuthor' field has been set.
      * @return True if the 'firstAuthor' field has been set, false otherwise.
      */
    public boolean hasFirstAuthor() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'firstAuthor' field.
      * @return This builder.
      */
    public Builder clearFirstAuthor() {
      firstAuthor = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'titleId' field.
      * @return The value.
      */
    public CharSequence getTitleId() {
      return titleId;
    }


    /**
      * Sets the value of the 'titleId' field.
      * @param value The value of 'titleId'.
      * @return This builder.
      */
    public Builder setTitleId(CharSequence value) {
      validate(fields()[12], value);
      this.titleId = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'titleId' field has been set.
      * @return True if the 'titleId' field has been set, false otherwise.
      */
    public boolean hasTitleId() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'titleId' field.
      * @return This builder.
      */
    public Builder clearTitleId() {
      titleId = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'embargoInfo' field.
      * @return The value.
      */
    public CharSequence getEmbargoInfo() {
      return embargoInfo;
    }


    /**
      * Sets the value of the 'embargoInfo' field.
      * @param value The value of 'embargoInfo'.
      * @return This builder.
      */
    public Builder setEmbargoInfo(CharSequence value) {
      validate(fields()[13], value);
      this.embargoInfo = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'embargoInfo' field has been set.
      * @return True if the 'embargoInfo' field has been set, false otherwise.
      */
    public boolean hasEmbargoInfo() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'embargoInfo' field.
      * @return This builder.
      */
    public Builder clearEmbargoInfo() {
      embargoInfo = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'coverageDepth' field.
      * @return The value.
      */
    public CharSequence getCoverageDepth() {
      return coverageDepth;
    }


    /**
      * Sets the value of the 'coverageDepth' field.
      * @param value The value of 'coverageDepth'.
      * @return This builder.
      */
    public Builder setCoverageDepth(CharSequence value) {
      validate(fields()[14], value);
      this.coverageDepth = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'coverageDepth' field has been set.
      * @return True if the 'coverageDepth' field has been set, false otherwise.
      */
    public boolean hasCoverageDepth() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'coverageDepth' field.
      * @return This builder.
      */
    public Builder clearCoverageDepth() {
      coverageDepth = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'notes' field.
      * @return The value.
      */
    public CharSequence getNotes() {
      return notes;
    }


    /**
      * Sets the value of the 'notes' field.
      * @param value The value of 'notes'.
      * @return This builder.
      */
    public Builder setNotes(CharSequence value) {
      validate(fields()[15], value);
      this.notes = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'notes' field has been set.
      * @return True if the 'notes' field has been set, false otherwise.
      */
    public boolean hasNotes() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'notes' field.
      * @return This builder.
      */
    public Builder clearNotes() {
      notes = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'publisherName' field.
      * @return The value.
      */
    public CharSequence getPublisherName() {
      return publisherName;
    }


    /**
      * Sets the value of the 'publisherName' field.
      * @param value The value of 'publisherName'.
      * @return This builder.
      */
    public Builder setPublisherName(CharSequence value) {
      validate(fields()[16], value);
      this.publisherName = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'publisherName' field has been set.
      * @return True if the 'publisherName' field has been set, false otherwise.
      */
    public boolean hasPublisherName() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'publisherName' field.
      * @return This builder.
      */
    public Builder clearPublisherName() {
      publisherName = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'publicationType' field.
      * @return The value.
      */
    public CharSequence getPublicationType() {
      return publicationType;
    }


    /**
      * Sets the value of the 'publicationType' field.
      * @param value The value of 'publicationType'.
      * @return This builder.
      */
    public Builder setPublicationType(CharSequence value) {
      validate(fields()[17], value);
      this.publicationType = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'publicationType' field has been set.
      * @return True if the 'publicationType' field has been set, false otherwise.
      */
    public boolean hasPublicationType() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'publicationType' field.
      * @return This builder.
      */
    public Builder clearPublicationType() {
      publicationType = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateMonographPublishedPrint' field.
      * @return The value.
      */
    public CharSequence getDateMonographPublishedPrint() {
      return dateMonographPublishedPrint;
    }


    /**
      * Sets the value of the 'dateMonographPublishedPrint' field.
      * @param value The value of 'dateMonographPublishedPrint'.
      * @return This builder.
      */
    public Builder setDateMonographPublishedPrint(CharSequence value) {
      validate(fields()[18], value);
      this.dateMonographPublishedPrint = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'dateMonographPublishedPrint' field has been set.
      * @return True if the 'dateMonographPublishedPrint' field has been set, false otherwise.
      */
    public boolean hasDateMonographPublishedPrint() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'dateMonographPublishedPrint' field.
      * @return This builder.
      */
    public Builder clearDateMonographPublishedPrint() {
      dateMonographPublishedPrint = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'dateMonographPublishedOnline' field.
      * @return The value.
      */
    public CharSequence getDateMonographPublishedOnline() {
      return dateMonographPublishedOnline;
    }


    /**
      * Sets the value of the 'dateMonographPublishedOnline' field.
      * @param value The value of 'dateMonographPublishedOnline'.
      * @return This builder.
      */
    public Builder setDateMonographPublishedOnline(CharSequence value) {
      validate(fields()[19], value);
      this.dateMonographPublishedOnline = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'dateMonographPublishedOnline' field has been set.
      * @return True if the 'dateMonographPublishedOnline' field has been set, false otherwise.
      */
    public boolean hasDateMonographPublishedOnline() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'dateMonographPublishedOnline' field.
      * @return This builder.
      */
    public Builder clearDateMonographPublishedOnline() {
      dateMonographPublishedOnline = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /**
      * Gets the value of the 'monographVolume' field.
      * @return The value.
      */
    public Integer getMonographVolume() {
      return monographVolume;
    }


    /**
      * Sets the value of the 'monographVolume' field.
      * @param value The value of 'monographVolume'.
      * @return This builder.
      */
    public Builder setMonographVolume(Integer value) {
      validate(fields()[20], value);
      this.monographVolume = value;
      fieldSetFlags()[20] = true;
      return this;
    }

    /**
      * Checks whether the 'monographVolume' field has been set.
      * @return True if the 'monographVolume' field has been set, false otherwise.
      */
    public boolean hasMonographVolume() {
      return fieldSetFlags()[20];
    }


    /**
      * Clears the value of the 'monographVolume' field.
      * @return This builder.
      */
    public Builder clearMonographVolume() {
      monographVolume = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /**
      * Gets the value of the 'monographEdition' field.
      * @return The value.
      */
    public CharSequence getMonographEdition() {
      return monographEdition;
    }


    /**
      * Sets the value of the 'monographEdition' field.
      * @param value The value of 'monographEdition'.
      * @return This builder.
      */
    public Builder setMonographEdition(CharSequence value) {
      validate(fields()[21], value);
      this.monographEdition = value;
      fieldSetFlags()[21] = true;
      return this;
    }

    /**
      * Checks whether the 'monographEdition' field has been set.
      * @return True if the 'monographEdition' field has been set, false otherwise.
      */
    public boolean hasMonographEdition() {
      return fieldSetFlags()[21];
    }


    /**
      * Clears the value of the 'monographEdition' field.
      * @return This builder.
      */
    public Builder clearMonographEdition() {
      monographEdition = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /**
      * Gets the value of the 'firstEditor' field.
      * @return The value.
      */
    public CharSequence getFirstEditor() {
      return firstEditor;
    }


    /**
      * Sets the value of the 'firstEditor' field.
      * @param value The value of 'firstEditor'.
      * @return This builder.
      */
    public Builder setFirstEditor(CharSequence value) {
      validate(fields()[22], value);
      this.firstEditor = value;
      fieldSetFlags()[22] = true;
      return this;
    }

    /**
      * Checks whether the 'firstEditor' field has been set.
      * @return True if the 'firstEditor' field has been set, false otherwise.
      */
    public boolean hasFirstEditor() {
      return fieldSetFlags()[22];
    }


    /**
      * Clears the value of the 'firstEditor' field.
      * @return This builder.
      */
    public Builder clearFirstEditor() {
      firstEditor = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /**
      * Gets the value of the 'parentPublicationTitleId' field.
      * @return The value.
      */
    public CharSequence getParentPublicationTitleId() {
      return parentPublicationTitleId;
    }


    /**
      * Sets the value of the 'parentPublicationTitleId' field.
      * @param value The value of 'parentPublicationTitleId'.
      * @return This builder.
      */
    public Builder setParentPublicationTitleId(CharSequence value) {
      validate(fields()[23], value);
      this.parentPublicationTitleId = value;
      fieldSetFlags()[23] = true;
      return this;
    }

    /**
      * Checks whether the 'parentPublicationTitleId' field has been set.
      * @return True if the 'parentPublicationTitleId' field has been set, false otherwise.
      */
    public boolean hasParentPublicationTitleId() {
      return fieldSetFlags()[23];
    }


    /**
      * Clears the value of the 'parentPublicationTitleId' field.
      * @return This builder.
      */
    public Builder clearParentPublicationTitleId() {
      parentPublicationTitleId = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /**
      * Gets the value of the 'precedingPublicationTitleId' field.
      * @return The value.
      */
    public CharSequence getPrecedingPublicationTitleId() {
      return precedingPublicationTitleId;
    }


    /**
      * Sets the value of the 'precedingPublicationTitleId' field.
      * @param value The value of 'precedingPublicationTitleId'.
      * @return This builder.
      */
    public Builder setPrecedingPublicationTitleId(CharSequence value) {
      validate(fields()[24], value);
      this.precedingPublicationTitleId = value;
      fieldSetFlags()[24] = true;
      return this;
    }

    /**
      * Checks whether the 'precedingPublicationTitleId' field has been set.
      * @return True if the 'precedingPublicationTitleId' field has been set, false otherwise.
      */
    public boolean hasPrecedingPublicationTitleId() {
      return fieldSetFlags()[24];
    }


    /**
      * Clears the value of the 'precedingPublicationTitleId' field.
      * @return This builder.
      */
    public Builder clearPrecedingPublicationTitleId() {
      precedingPublicationTitleId = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /**
      * Gets the value of the 'accessType' field.
      * @return The value.
      */
    public CharSequence getAccessType() {
      return accessType;
    }


    /**
      * Sets the value of the 'accessType' field.
      * @param value The value of 'accessType'.
      * @return This builder.
      */
    public Builder setAccessType(CharSequence value) {
      validate(fields()[25], value);
      this.accessType = value;
      fieldSetFlags()[25] = true;
      return this;
    }

    /**
      * Checks whether the 'accessType' field has been set.
      * @return True if the 'accessType' field has been set, false otherwise.
      */
    public boolean hasAccessType() {
      return fieldSetFlags()[25];
    }


    /**
      * Clears the value of the 'accessType' field.
      * @return This builder.
      */
    public Builder clearAccessType() {
      accessType = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerPackagePackage' field.
      * @return The value.
      */
    public CharSequence getProviderPackagePackage() {
      return providerPackagePackage;
    }


    /**
      * Sets the value of the 'providerPackagePackage' field.
      * @param value The value of 'providerPackagePackage'.
      * @return This builder.
      */
    public Builder setProviderPackagePackage(CharSequence value) {
      validate(fields()[26], value);
      this.providerPackagePackage = value;
      fieldSetFlags()[26] = true;
      return this;
    }

    /**
      * Checks whether the 'providerPackagePackage' field has been set.
      * @return True if the 'providerPackagePackage' field has been set, false otherwise.
      */
    public boolean hasProviderPackagePackage() {
      return fieldSetFlags()[26];
    }


    /**
      * Clears the value of the 'providerPackagePackage' field.
      * @return This builder.
      */
    public Builder clearProviderPackagePackage() {
      providerPackagePackage = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerPackageDateP' field.
      * @return The value.
      */
    public java.time.LocalDate getProviderPackageDateP() {
      return providerPackageDateP;
    }


    /**
      * Sets the value of the 'providerPackageDateP' field.
      * @param value The value of 'providerPackageDateP'.
      * @return This builder.
      */
    public Builder setProviderPackageDateP(java.time.LocalDate value) {
      validate(fields()[27], value);
      this.providerPackageDateP = value;
      fieldSetFlags()[27] = true;
      return this;
    }

    /**
      * Checks whether the 'providerPackageDateP' field has been set.
      * @return True if the 'providerPackageDateP' field has been set, false otherwise.
      */
    public boolean hasProviderPackageDateP() {
      return fieldSetFlags()[27];
    }


    /**
      * Clears the value of the 'providerPackageDateP' field.
      * @return This builder.
      */
    public Builder clearProviderPackageDateP() {
      fieldSetFlags()[27] = false;
      return this;
    }

    /**
      * Gets the value of the 'providerPackageIdtProvider' field.
      * @return The value.
      */
    public int getProviderPackageIdtProvider() {
      return providerPackageIdtProvider;
    }


    /**
      * Sets the value of the 'providerPackageIdtProvider' field.
      * @param value The value of 'providerPackageIdtProvider'.
      * @return This builder.
      */
    public Builder setProviderPackageIdtProvider(int value) {
      validate(fields()[28], value);
      this.providerPackageIdtProvider = value;
      fieldSetFlags()[28] = true;
      return this;
    }

    /**
      * Checks whether the 'providerPackageIdtProvider' field has been set.
      * @return True if the 'providerPackageIdtProvider' field has been set, false otherwise.
      */
    public boolean hasProviderPackageIdtProvider() {
      return fieldSetFlags()[28];
    }


    /**
      * Clears the value of the 'providerPackageIdtProvider' field.
      * @return This builder.
      */
    public Builder clearProviderPackageIdtProvider() {
      fieldSetFlags()[28] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LigneKbartImprime build() {
      try {
        LigneKbartImprime record = new LigneKbartImprime();
        record.ppn = fieldSetFlags()[0] ? this.ppn : (CharSequence) defaultValue(fields()[0]);
        record.publicationTitle = fieldSetFlags()[1] ? this.publicationTitle : (CharSequence) defaultValue(fields()[1]);
        record.printIdentifier = fieldSetFlags()[2] ? this.printIdentifier : (CharSequence) defaultValue(fields()[2]);
        record.onlineIdentifier = fieldSetFlags()[3] ? this.onlineIdentifier : (CharSequence) defaultValue(fields()[3]);
        record.dateFirstIssueOnline = fieldSetFlags()[4] ? this.dateFirstIssueOnline : (CharSequence) defaultValue(fields()[4]);
        record.numFirstVolOnline = fieldSetFlags()[5] ? this.numFirstVolOnline : (Integer) defaultValue(fields()[5]);
        record.numFirstIssueOnline = fieldSetFlags()[6] ? this.numFirstIssueOnline : (Integer) defaultValue(fields()[6]);
        record.dateLastIssueOnline = fieldSetFlags()[7] ? this.dateLastIssueOnline : (CharSequence) defaultValue(fields()[7]);
        record.numLastVolOnline = fieldSetFlags()[8] ? this.numLastVolOnline : (Integer) defaultValue(fields()[8]);
        record.numLastIssueOnline = fieldSetFlags()[9] ? this.numLastIssueOnline : (Integer) defaultValue(fields()[9]);
        record.titleUrl = fieldSetFlags()[10] ? this.titleUrl : (CharSequence) defaultValue(fields()[10]);
        record.firstAuthor = fieldSetFlags()[11] ? this.firstAuthor : (CharSequence) defaultValue(fields()[11]);
        record.titleId = fieldSetFlags()[12] ? this.titleId : (CharSequence) defaultValue(fields()[12]);
        record.embargoInfo = fieldSetFlags()[13] ? this.embargoInfo : (CharSequence) defaultValue(fields()[13]);
        record.coverageDepth = fieldSetFlags()[14] ? this.coverageDepth : (CharSequence) defaultValue(fields()[14]);
        record.notes = fieldSetFlags()[15] ? this.notes : (CharSequence) defaultValue(fields()[15]);
        record.publisherName = fieldSetFlags()[16] ? this.publisherName : (CharSequence) defaultValue(fields()[16]);
        record.publicationType = fieldSetFlags()[17] ? this.publicationType : (CharSequence) defaultValue(fields()[17]);
        record.dateMonographPublishedPrint = fieldSetFlags()[18] ? this.dateMonographPublishedPrint : (CharSequence) defaultValue(fields()[18]);
        record.dateMonographPublishedOnline = fieldSetFlags()[19] ? this.dateMonographPublishedOnline : (CharSequence) defaultValue(fields()[19]);
        record.monographVolume = fieldSetFlags()[20] ? this.monographVolume : (Integer) defaultValue(fields()[20]);
        record.monographEdition = fieldSetFlags()[21] ? this.monographEdition : (CharSequence) defaultValue(fields()[21]);
        record.firstEditor = fieldSetFlags()[22] ? this.firstEditor : (CharSequence) defaultValue(fields()[22]);
        record.parentPublicationTitleId = fieldSetFlags()[23] ? this.parentPublicationTitleId : (CharSequence) defaultValue(fields()[23]);
        record.precedingPublicationTitleId = fieldSetFlags()[24] ? this.precedingPublicationTitleId : (CharSequence) defaultValue(fields()[24]);
        record.accessType = fieldSetFlags()[25] ? this.accessType : (CharSequence) defaultValue(fields()[25]);
        record.providerPackagePackage = fieldSetFlags()[26] ? this.providerPackagePackage : (CharSequence) defaultValue(fields()[26]);
        record.providerPackageDateP = fieldSetFlags()[27] ? this.providerPackageDateP : (java.time.LocalDate) defaultValue(fields()[27]);
        record.providerPackageIdtProvider = fieldSetFlags()[28] ? this.providerPackageIdtProvider : (Integer) defaultValue(fields()[28]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LigneKbartImprime>
    WRITER$ = (org.apache.avro.io.DatumWriter<LigneKbartImprime>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LigneKbartImprime>
    READER$ = (org.apache.avro.io.DatumReader<LigneKbartImprime>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










